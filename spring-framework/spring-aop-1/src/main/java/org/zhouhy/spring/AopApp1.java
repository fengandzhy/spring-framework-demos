package org.zhouhy.spring;

/**
 * 1. Aspect 切面, 除了目标类以外的类(事务管理,日志记录,权限验证)都是切面
 * 
 * 2. Target 目标对象, 目标对象指将要被增强的对象，即包含主业务逻辑的类对象。或者说是被一个或者多个切面所通知的对象。
 * 
 * 3. JoinPoint 连接点, 程序执行的某个特定位置,如类开始初始化前、类初始化后、类某个方法调用前、调用后、方法抛出异常后。
 * 
 * 4. Pointcut 切点, 相当于代理对象的方法被调用的条件. AOP通过“切点”定位特定的连接点。连接点相当于数据库中的记录，而切点相当于查询条件。
 * 
 * 5. Advice 通知, 通知是指拦截到连接点之后要执行的代码，包括了“around”、“before”和“after”等不同类型的通知。
 * 
 * 6. Weaving 织入, 织入是将切面和业务逻辑对象连接起来, 并创建通知代理的过程
 * 
 * 7. Advisor 增强器, 是切面的另外一种实现，能够将通知以更为复杂的方式织入到目标对象中，是将通知包装为更复杂切面的装配器 * 
 * 
 * 8. 我们思考使用aop的目的，就是不改变源码的前提下，往一个方法的前后插入一个代码块
 * 
 * 9. 通过aop命名空间的<aop:aspectj-autoproxy />声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面。
 * 
 * 10. 可以用@Order来指定切面的优先级
 * 
 * */
public class AopApp1 {
    public static void main(String[] args) {
        
    }
}
