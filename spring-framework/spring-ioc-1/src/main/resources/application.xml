<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd">
    
    <!--这个构造器确保原类当中要有这样的构造器,那就是参数都是两个String 的-->
    <bean id="user1" class="org.zhouhy.spring.bean.User">
        <constructor-arg type="java.lang.String" value="AA"/>
        <constructor-arg type="java.lang.String" value="123456"/>
    </bean>
    
    <!--这里的xml会自动检测类型, 例如 index="2" 的 value="a" 它会报错,与它的类型不匹配-->
    <bean id="user2" class="org.zhouhy.spring.bean.User">
        <constructor-arg index="0" value="AA"/>
        <constructor-arg index="1" value="123456"/>
        <constructor-arg index="2" value="1"/>
    </bean>

    <!--
    这种注入的方式需要两个参数的构造器, 原类中有两个符合这种参数的构造器, 两个都是string, 两个都是Integer,
    但是spring 还是优先选取了两个string类型的构造器, 因为这个不需要做类型转换.
    注入的是string类型, spring是要通过转换才能变成Integer 类型    
    -->
    <bean id="user3" class="org.zhouhy.spring.bean.User">
        <constructor-arg index="0" value="22"/>
        <constructor-arg index="1" value="33"/>        
    </bean>
    
    
    <!--*************************************************以上是构造器注入的**************************************************-->
    
    
    <!--
    关于setter方法注入有这么两点需要注意
        1. 原类必须要有空构造器, 因为spring是通过原类的空构造器来创建实例的
        2. 注入属性的时候,原类必须要有相应的setter方法, 例如注入detail, 原类就要有setDetail方法
        3. 就是原类的空构造器如果是private的, 这并不妨碍spring创建这个实例.
     -->
    <bean id="address1"  class="org.zhouhy.spring.bean.Address">
        <property name="id" value="1"/>
        <property name="detail" value="ABC"/>
    </bean>

    <bean id="address2"  class="org.zhouhy.spring.bean.Address">
        <property name="id" value="2"/>
        <property name="detail" value="DEF"/>
    </bean>

    <bean id="address3"  class="org.zhouhy.spring.bean.Address">
        <property name="id" value="2"/>
        <property name="detail" value="DEF"/>
    </bean>
    
    
    <!--*****************************************************以上是setter注入的**********************************************-->

    <!--
    关于这个自定义转换器
        1. 转换器必须实现Converter接口, 并在convert方法里实现转换的内容
        2. 转换器必须注册在 ConversionServiceFactoryBean
        3. ConversionServiceFactoryBean 必须有id 而且必须id="conversionService"    
    -->
    
    <bean id="stu1" class="org.zhouhy.spring.bean.Student">
        <property name="id" value="1"/>
        <property name="name" value="Sam"/>
        <property name="birthday" value="2001-10-24"/>
    </bean>

    <bean id="stu2" class="org.zhouhy.spring.bean.Student">
        <property name="id" value="1"/>
        <property name="name" value="Frank"/>
        <property name="birthday" value="2002-12-23"/>
    </bean>
    
    <bean id="myDateConverter" class="org.zhouhy.spring.converter.MyDateConverter">
        <property name="pattern" value="yyyy-MM-dd"/>
    </bean>
    
    <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <ref bean="myDateConverter"/>
            </set>
        </property>
    </bean>
    
    <!--*********************************************************以上是自定义转换器的内容*****************************************-->
    <!--
        主要注意配置的配置基本类型和引用类型的区别, 另外当配置properties 不能写成<prop key="1" value="one"></prop>
        这点跟map是不同的,另外需要注意的是, properties 没有引用类型    
    -->
    
    <bean id="account" class="org.zhouhy.spring.bean.Account">
        <property name="id" value="1"/>
        <property name="name" value="Sam"/>
        <property name="array">
            <array>
                <value>abc</value>
                <value>2</value>
                <value>bcd</value>
            </array>
        </property>
        <property name="list">
            <list>
                <value>3</value>
                <value>qwq</value>
                <value>"qwq"</value>
            </list>
        </property>
        <property name="set">
            <set>
                <ref bean="address1"></ref>
                <ref bean="address2"></ref>
                <ref bean="address3"></ref>
            </set>
        </property>
        <property name="map">
            <map>
                <entry key="a" value="AAA"/>
                <entry key="b" value="BBB"/>
                <entry key="c" value="CCC"/>
            </map>
        </property>
        <property name="users">
            <map>
                <entry key="user1" value-ref="user1"/>
                <entry key="user2" value-ref="user2"/>
                <entry key="user3" value-ref="user3"/>
            </map>
        </property>
        <property name="properties">
            <props>
                <prop key="1">one</prop>
                <prop key="2">two</prop>
            </props>
        </property>       
    </bean>
    
    
    <!--***********************************************************以上是关于集合类的配置*******************************************-->

    <!--
        1. 关于这个循环依赖的一定是setter方法注入, spring 可以很好的解决循环依赖的问题, 不能用构造器注入的方式来注入循环依赖,
        例如在本例中circleBeanA2 与 circleBeanB2 互相依赖, 而且两个都是构造器注入就有问题了
        就是说循环依赖必须有一个是setter方法注入,不能全部都是constructor 注入, 否则bean就无法创建
        
        2. 关于两个循环依赖的类, toString 方法要特别注意, 不能造成死循环. 
        
        
    -->
    <bean id="circleBeanA1" class="org.zhouhy.spring.bean.CircleBeanA">
        <property name="id" value="1"/>
        <property name="name" value="A1"/>
        <property name="circleBeanB" ref="circleBeanB1"></property>
    </bean>
    
    <bean id="circleBeanB1" class="org.zhouhy.spring.bean.CircleBeanB">
        <property name="id" value="2"/>
        <property name="name" value="B1"/>
        <property name="circleBeanA" ref="circleBeanA1"/>
    </bean>

    <!--<bean id="circleBeanA2" class="org.zhouhy.spring.bean.CircleBeanA">-->
        <!--<constructor-arg type="java.lang.Integer" value="2"/> -->
        <!--<constructor-arg type="java.lang.String" value="A2"/>-->
        <!--<constructor-arg type="org.zhouhy.spring.bean.CircleBeanB" ref="circleBeanB2"/>-->
    <!--</bean>-->

    <!--<bean id="circleBeanB2" class="org.zhouhy.spring.bean.CircleBeanB">-->
        <!--<constructor-arg type="java.lang.Integer" value="2"/>-->
        <!--<constructor-arg type="java.lang.String" value="B2"/>-->
        <!--<constructor-arg type="org.zhouhy.spring.bean.CircleBeanA" ref="circleBeanA2"/>-->
    <!--</bean>-->
   
    <!--*********************************************************************以上是关于循环依赖***************************************-->

    <!--
        1. 特殊字符的注入, 它一定是<value><![CDATA[<admin>]]></value> 这种形式,不可能写成<property name="password" value="<![CDATA[<admin>]]>">
        这个是特殊字符不允许的
        
        2. 关于这个集合注入, 你可以把集合抽象出来, 这样的话students这个集合可以被用在任何地方,不仅仅是teacher 类里面
         
    -->
    
    <bean id="teacher" class="org.zhouhy.spring.bean.Teacher">
        <property name="id" value="1"/>
        <property name="name" value="Sam"/>
        <property name="password">
            <value><![CDATA[<admin>]]></value>
        </property>
        <property name="studentList" ref="students"/>
    </bean>
    
    <util:list id="students">
        <ref bean="stu1"/>
        <ref bean="stu2"/>
    </util:list>

    <!--***********************************************************************以上是特殊字符和另外一种集合注入****************************-->


</beans>